---
title: "Dynamic Reporting"
subtitle: "Workshop at the UZH Reproducibility Day 2023"
author: "Samuel Pawel and Felix Hofmann"
institute: "Center for Reproducible Science (CRS)"
format: 
  revealjs:
    width: 1400
    height: 900
embed-resources: true # create a single file with all depdencies inside
---

## Overview
<!-- options: -->
<!-- https://quarto.org/docs/reference/formats/presentations/revealjs.html -->

<br> <br> 

1) What is dynamic reporting?

2) How to do dynamic reporting?

3) Hands-on exercises


::: aside
Material at <https://github.com/crsuzh/dynamicReporting>
:::

::: {.notes}
Goal 1: First overview of dynamic reporting

Goal 2: Learn about popular tools for dynamic reporting 
:::


## Manual reporting workflow

![](./diagram1.svg){.absolute width="100%"}

## What are the disadvantages?

:::: columns

::: column
<br> <br> 

- Tedious and error-prone
- Not directly reproducible
- Difficult to share/reuse
- New data &rarr; need to repeat everything
:::

::: column
<br> <br> 

![](./diagram1.svg){fig-align="right"}
:::

::::

:::{.notes}
After this slide:

- switch to RStudio and compile the example with `accidents_2020.csv`
- then change `filename` to `accidents_2021.csv` and recompile
:::

## Dynamic reporting workflow

![](diagram2.svg){.absolute width="100%"}


## Popular tools for dynamic reporting

<br> <br> <br>

|                      | Main programming language    | Main markup language | Main output format |
| -------------------- |----------------------------- | -------------------- | ------------------ |
| `knitr` (.Rnw)       | **R**                        | LaTeX                | pdf                |
| `R Markdown` (.Rmd)  | **R**                        | Markdown             | html, pdf, docx    |
| `Quarto` (.qmd)      | **R**, **Python**, **Julia** | Markdown             | html, pdf, docx    |



## Which tool for whom?

<br> 

* `knitr` &rarr; **R**+**LaTeX** users (intermediate to advanced) 
* `R Markdown` &rarr; **R** users (beginner to advanced)
* `Quarto` &rarr; **R**/**Python**/**Julia** users (beginner to advanced)

![](knitr-meme.jpg){.absolute bottom="18%" left="0%" width="30%"}
![](rmarkdown-meme.jpg){.absolute bottom="0%" left="32%" width="30%"}
![](quarto-meme.jpg){.absolute bottom="10%" left="65%" width="30%"}


## Useful links 

* [Dynamic Reporting & Reproducibility in Research](https://www.sts.uzh.ch/de/Lehrangebote-School/Lehrangebote-ab-FS22/Future-Skills/Get-R_eady.html) 
<br> &rarr; transdisciplinary course at UZH

* [Dynamic Reporting Primer](https://doi.org/10.5281/zenodo.7565735) 
<br> &rarr; Primer article from the CRS

* [R Markdown tutorial](https://rmarkdown.rstudio.com/lesson-1.html)
<br> &rarr; good tutorial series from R Studio

* [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)
<br> &rarr; freely available book

* [knitr website](https://yihui.org/knitr)
<br> &rarr; very comprehensive website from the `knitr` author

* [Quarto tutorial](https://quarto.org/docs/get-started/hello/vscode.html)
<br> &rarr; good tutorial series from R Studio

* [R Markdown cheatsheet](https://posit.co/resources/cheatsheets/)



## Exercises

<br>

1) Download the data sets on **traffic accidents in Zurich** from <https://github.crsuzh/dynamicReporting/workshop/>.

2) Explore the data from the **2020** (file `accidents_2020.csv`) . 
   Compute the number of accidents for each **weekday** and visualize your
   results. Create an HTML report using either `R Markdown` or `Quarto`.

3) Now use the data from **2020** and **2021** (file `accidents_2021.csv`) 
   and create an updated report.

4) **Bonus**: Convert your report to a presentation.

:::{.notes}
Felix
:::


## Backup: R Markdown 

<br>

![](rmarkdown.png){.absolute top="0%" right="0%" width="20%"}

* **R** programming language <br> (> 60 other also possible) <!-- https://bookdown.org/yihui/rmarkdown/language-engines.html -->

* **.Rmd** files (edit in RStudio, VS Code, etc.)

* Markup language: **Markdown**

* **HTML**, **PDF**, **DOCX** output formats (and more)

* `rmarkdown` is an **R** package

::: aside
<https://CRAN.R-project.org/package=rmarkdown>

<https://rmarkdown.rstudio.com/index.html>
:::

:::{.notes}
Felix

- Mixture code and text (analysis and description)
- Composed of different parts (yaml header, markdown text, code chunks, inline code)
   - Why is this useful?
- Cross references (Figures, Tables, Chunks)
- Bibliography
- Different output formats for reports or slides (html, pdf, docx, pptx)
- Maybe explain how this is compiled? (Probably too technical)
:::



## Backup: knitr

<br>

![](knitr.png){.absolute top="0%" right="0%" width="20%"}

* Programming language: **R** <br> (> 60 other also possible) <!-- https://bookdown.org/yihui/rmarkdown/language-engines.html -->

* **.Rnw** files (edit in RStudio, VS Code, etc.)

* Markup languages: **LaTeX** <br> (+ HTML, Markdown, and more)

* **PDF** output format (and more)

* `knitr` is an **R** package


::: aside
<https://CRAN.R-project.org/package=knitr>

<https://yihui.org/knitr/>
:::

## Backup: Quarto

<br>

![](quarto.png){.absolute top="0%" right="0%" width="20%"}

* Programming language: **R**, **Python**, **Julia**

* **.qmd** files  (edit in RStudio, VS Code, etc.)

* Markup language: **Markdown**

* **HTML**, **PDF**, **DOCX** output formats (and more)

* Evolution of R Markdown (introduced in 2022)

* `quarto` is a separate program


::: aside
<https://quarto.org/>
:::

:::{.notes}
Felix

- Same parts as R markdown (yaml header, markdown text, code chunks, inline code)
- Slightly different syntax (Setting options, finer control over cross references)
- Different output formats (reveal.js - presentation, observable.js - interactive)
:::
