---
title: "Workshop on Quarto"
author: "Samuel Pawel & Felix Hofmann"
format:
    html:
        toc: true
        number-sections: true
        colorlinks: true
---

```{r}
#| label: setup
#| include: false

# Add some helper functions
make_lookups <- function(df, variables, suffix) {
    .GlobalEnv <- list2env(
        setNames(
            lapply(
                variables,
                \(x){
                    dup_cols <- paste0(x, suffix)
                    dat <- unique(df[c(x, dup_cols)])
                    o <- order(dat[[1]])
                    dat <- dat[o, ]
                    rownames(dat) <- NULL
                    dat
                }
            ),
            names(variables)
        ),
        envir = globalenv()
    )
    df[!(names(df) %in% paste0(variables, suffix))]
}
```
## Quarto

Quarto enables you to weave together content and executable code into a
finished document. To learn more about Quarto see <https://quarto.org>.

## Analysis of traffic accidents

First of all, let's make sure, we get the data we need. The following
`R` code chunk downloads a data set from city of Zurich's open data 
portal and imports it.

```{r}
#| label: download-data

# Set a name for our data file
filename <- "accidents.csv"
# Define where we want to download it from
source <- "https://data.stadt-zuerich.ch/dataset/sid_dav_strassenverkehrsunfallorte/download/RoadTrafficAccidentLocations.csv"
# Check if we already have  it downloaded
is_downloaded <- if(file.exists(filename)) TRUE else FALSE
# If it is not yet downloaded, download it and save it 
# under the name defined above
if(!is_downloaded)
    download.file(url = source, destfile = filename)
# Read the data file
data <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE)
```
Now that we have downloaded the data set, the next step is importing 
and preparing it for our purposes. This is done by the code chunk below.

```{r}
#| label: prepare-data

# Filter out translation columns in German, French, Italian
data <- data[!grepl("(_de|_fr|_it)$", names(data))]
# Get rid of non-informative columns
non_informative <- c("AccidentUID", "MunicipalityCode", "CantonCode")
data <- data[!(names(data) %in% non_informative)]
# Construct lookup tables such that we can remove duplicate information
lookups <- c(
    "atype" = "AccidentType",
    "sevtype" = "AccidentSeverityCategory",
    "rtype" = "RoadType"
)
data <- make_lookups(data, variables = lookups, suffix = "_en")
```
Since the data is now in the form we want it to be, we can start exploring it.


